---
- name: Add Karmada Helm repository
  block:
    - name: Try adding Karmada Helm repository
      ansible.builtin.command: helm repo add karmada {{ karmada_chart_repo }}
      register: helm_repo_result
      changed_when: "'has been added' in helm_repo_result.stdout"
      failed_when:
        - helm_repo_result.rc != 0
        - "'429 Too Many Requests' not in helm_repo_result.stderr"
      retries: 5
      delay: 30
      until: helm_repo_result.rc == 0 or "'429 Too Many Requests' not in helm_repo_result.stderr"

  rescue:
    - name: Handle rate limit for Helm repository
      ansible.builtin.debug:
        msg: "Hit rate limit (429) when adding Helm repository. Waiting before retry..."
      when: "'429 Too Many Requests' in helm_repo_result.stderr | default('')"

    - name: Wait for rate limit reset
      ansible.builtin.pause:
        seconds: 60
      when: "'429 Too Many Requests' in helm_repo_result.stderr | default('')"

    - name: Final attempt to add Karmada Helm repository
      ansible.builtin.command: helm repo add karmada {{ karmada_chart_repo }}
      register: helm_repo_final
      changed_when: "'has been added' in helm_repo_final.stdout"

- name: Update Helm repositories
  ansible.builtin.command: helm repo update
  register: helm_update_result
  changed_when: "'Update Complete' in helm_update_result.stdout"

- name: Check if Karmada namespace exists
  ansible.builtin.command: kubectl get namespace {{ karmada_namespace }}
  register: namespace_result
  ignore_errors: true
  changed_when: false

- name: Create Karmada namespace if not exists
  ansible.builtin.command: kubectl create namespace {{ karmada_namespace }}
  register: create_ns_result
  when: namespace_result.rc != 0
  changed_when: namespace_result.rc != 0 and create_ns_result.rc == 0

- name: Check if Karmada is already installed
  ansible.builtin.command: helm status karmada -n {{ karmada_namespace }}
  register: karmada_status
  ignore_errors: true
  changed_when: false

- name: Generate Karmada Helm values
  ansible.builtin.template:
    src: karmada-values.yaml.j2
    dest: /tmp/karmada-values.yaml
    mode: "0644"

- name: Get current Karmada values
  ansible.builtin.command: >
    helm get values karmada  --kubeconfig /etc/rancher/k3s/k3s.yaml
    --namespace {{ karmada_namespace }}
    -o yaml
  register: current_values
  when: karmada_status.rc == 0
  changed_when: false
  ignore_errors: true

- name: Compare current and new values
  ansible.builtin.copy:
    content: "{{ current_values.stdout | default('') }}"
    dest: /tmp/karmada-current-values.yaml
    mode: "0644"
  when: karmada_status.rc == 0 and current_values is defined and current_values.rc == 0
  changed_when: false

- name: Check if values have changed
  ansible.builtin.command: diff -q /tmp/karmada-current-values.yaml /tmp/karmada-values.yaml
  register: values_diff
  failed_when: false
  changed_when: false
  when: karmada_status.rc == 0 and current_values is defined and current_values.rc == 0

- name: Install or upgrade Karmada using Helm
  ansible.builtin.command: >
    helm upgrade --install karmada karmada/karmada  --kubeconfig /etc/rancher/k3s/k3s.yaml
    --namespace {{ karmada_namespace }}
    --version {{ karmada_chart_version }}
    -f /tmp/karmada-values.yaml
  register: karmada_deployment
  changed_when: karmada_deployment.rc == 0
  when: karmada_status.rc != 0 or (values_diff is defined and values_diff.rc != 0)

- name: Wait for Karmada components to be ready
  ansible.builtin.command: >
    kubectl -n {{ karmada_namespace }} wait --for=condition=Ready pod
    --selector="app=karmada-apiserver"  --timeout=300s
  register: karmada_wait
  changed_when: false
  retries: 10
  delay: 30
  until: karmada_wait.rc == 0

- name: Add karmada-control-plane label to control nodes
  kubernetes.core.k8s:
    state: present
    kind: Node
    name: "{{ inventory_hostname }}"
    context: "{{ inventory_hostname }}"
    definition:
      metadata:
        labels:
          karmada-control-plane: "true"
    merge_type: strategic-merge

- name: Setup Karmada API Server secret for chutes
  block:
    - name: Get secret from source namespace
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        name: "{{ secret_name | default('karmada-kubeconfig') }}"
        namespace: "{{ source_namespace | default('karmada-system') }}"
        context: "{{ inventory_hostname }}"
      register: source_api_secret

    - name: Create target namespace if it doesn't exist
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: chutes
        context: "{{ inventory_hostname }}"

    - name: Copy secret to target namespace
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ secret_name | default('karmada-kubeconfig') }}"
            namespace: "{{ target_namespace }}"
            labels: "{{ source_api_secret.resources[0].metadata.labels | default({}) }}"
            annotations: "{{ source_api_secret.resources[0].metadata.annotations | default({}) }}"
          type: "{{ source_api_secret.resources[0].type }}"
          data: "{{ source_api_secret.resources[0].data }}"
        context: "{{ inventory_hostname }}"
      vars:
        source_namespace: karmada-system
        target_namespace: chutes
        secret_name: karmada-kubeconfig
