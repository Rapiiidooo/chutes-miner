- name: Setup Kubernetes Node
  hosts: all
  become: yes
  vars:
    username: "{{ user }}"
    ssh_public_key: "{{ ssh_key }}"
    microk8s_channel: "1.31/stable"
    enable_gpu: "{{ gpu_enabled | default(false) }}"
    is_porter: "{{ porter | default(false) }}"

  tasks:
    - name: Set environment variables
      shell: |
        export DEBIAN_FRONTEND=noninteractive
        export NEEDRESTART_SUSPEND=y

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Stop and disable unattended upgrades
      systemd:
        name: unattended-upgrades
        state: stopped
        enabled: no

    - name: Create user
      user:
        name: "{{ username }}"
        shell: /bin/bash
        create_home: yes
        state: present

    - name: Create SSH directories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0700'
      with_items:
        - "/home/{{ username }}/.ssh"
        - "/root/.ssh"

    - name: Add authorized SSH keys
      copy:
        content: "{{ ssh_public_key }}"
        dest: "{{ item }}"
        mode: '0700'
      with_items:
        - "/home/{{ username }}/.ssh/authorized_keys"
        - "/root/.ssh/authorized_keys"

    - name: Set correct ownership for user home
      file:
        path: "/home/{{ username }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        recurse: yes

    - name: Add user to sudoers
      lineinfile:
        path: /etc/sudoers
        line: '{{ username }} ALL=(ALL) NOPASSWD:ALL'
        validate: 'visudo -cf %s'

    - name: Remove old containerd if exists
      apt:
        name: containerd.io
        state: absent

    - name: Install basic system prerequisites
      apt:
        name:
          - socat
          - vim
          - jq
          - bc
          - libclang-dev
          - npm
          - clang
          - libssl-dev
          - llvm
          - libudev-dev
          - protobuf-compiler
          - python3
          - python3-pip
          - python3-venv
          - docker.io
          - docker-compose
          - build-essential
          - nginx
          - redis
          - net-tools
          - ffmpeg
          - rsyslog
          - libpq-dev
          - snapd
        state: present

    - name: Set vim as default editor
      alternatives:
        name: editor
        path: /usr/bin/vim
        priority: 1

    - name: Get list of installed lambda packages
      shell: dpkg --list | grep lambda | awk '{print $2}'
      register: lambda_packages
      changed_when: false

    - name: Check if lambda version file exists
      stat:
        path: /etc/lambda-version
      register: lambda_version_file

    - name: Check if another lambda package file exists, backup
      stat:
        path: /etc/systemd/system/lambda-jupyter.service
      register: lambda_file_backup

    - name: Remove lambda packages
      apt:
        name: "{{ lambda_packages.stdout_lines }}"
        state: absent
        purge: yes
      when:
        - lambda_version_file.stat.exists or lambda_file_backup.stat.exists
        - lambda_packages.stdout_lines | length > 0

    - name: Check CUDA installation
      apt:
        name: cuda-toolkit-12-6
        state: present
      check_mode: yes
      register: cuda_check
      ignore_errors: yes
      when: enable_gpu | bool

    - name: Purge existing NVIDIA/CUDA packages
      shell: |
        PKGS=$(dpkg --list | egrep -i 'cuda|nvidia' | grep -v 'linux-nvidia' | awk '{print $2}')
        if [ ! -z "$PKGS" ]; then
          echo "$PKGS" | xargs apt -y remove --allow-change-held-packages
          echo "$PKGS" | xargs dpkg --purge
        fi
      ignore_errors: yes
      register: gpu_setup
      when: (gpu_enabled | bool) and (cuda_check.failed or cuda_check.changed)

    - name: GPU Setup Tasks
      when: enable_gpu | bool
      block:
        - name: Download and install CUDA keyring
          block:
            - get_url:
                url: https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb
                dest: /tmp/cuda-keyring.deb
            - apt:
                deb: /tmp/cuda-keyring.deb

        - name: Update apt cache
          apt:
            update_cache: yes

        - name: Install NVIDIA packages
          apt:
            name:
              - cuda-toolkit-12-6
              - nvidia-open-560
              - nvidia-fabricmanager-560
              - linux-nvidia-hwe-22.04
            state: present

        - name: Configure NVIDIA Fabric Manager
          systemd:
            name: nvidia-fabricmanager
            enabled: yes
            masked: no

        - name: Set NVIDIA device permissions
          file:
            path: "{{ item }}"
            mode: '0666'
          with_fileglob:
            - /dev/nvidia*
            - /dev/nvidiactl
            - /dev/nvidia-uvm
            - /dev/nvidia-uvm-tools

        - name: Create NVIDIA character device symlinks
          shell: |
            ls /dev/nvidia? | egrep 'nvidia[0-9]' | while read i
            do
              N=$(echo $i | sed 's/\/dev\/nvidia//');
              MAJ=$(ls -l $i | awk '{print $5}' | cut -d, -f1)
              MIN=$(ls -l $i | awk '{print $6}')
              mkdir -p /dev/char/$MAJ:$MIN
              ln -sf $i /dev/char/$MAJ:$MIN
            done

    - name: Configure file limits
      blockinfile:
        path: /etc/security/limits.conf
        block: |
          * soft nofile 40000
          * hard nofile 40001

    - name: Configure PAM limits
      lineinfile:
        path: "{{ item }}"
        line: "session required pam_limits.so"
      with_items:
        - /etc/pam.d/common-session
        - /etc/pam.d/common-session-noninteractive

    - name: Install Wireguard
      apt:
        name: wireguard
        state: present

    - name: Check if Wireguard private key exists
      stat:
        path: /etc/wireguard/private.key
      register: wg_private_exists

    - name: Generate Wireguard keys
      shell: |
        wg genkey > /etc/wireguard/private.key
        cat /etc/wireguard/private.key | wg pubkey > /etc/wireguard/public.key
        chmod 600 /etc/wireguard/private.key /etc/wireguard/public.key
      when: not wg_private_exists.stat.exists
      register: wg_key_created

    - name: Get public keys
      slurp:
        src: /etc/wireguard/public.key
      register: public_keys

    - name: Get private keys
      slurp:
        src: /etc/wireguard/private.key
      register: private_keys

    - name: Set facts for keys
      set_fact:
        wg_public_key: "{{ public_keys['content'] | b64decode | trim }}"
        wg_private_key: "{{ private_keys['content'] | b64decode | trim }}"

    - name: Create Wireguard config for primary
      when: is_primary | bool
      template:
        src: wg0-primary.conf.j2
        dest: /etc/wireguard/wg0.conf
        mode: '0600'
      register: wireguard_primary

    - name: Create Wireguard config for worker
      when: not is_primary | bool
      template:
        src: wg0-worker.conf.j2
        dest: /etc/wireguard/wg0.conf
        mode: '0600'
      register: wireguard_worker

    - name: Enable and start Wireguard
      systemd:
        name: wg-quick@wg0
        enabled: yes
        state: started

    - name: Install MicroK8s
      community.general.snap:
        name: microk8s
        channel: "{{ microk8s_channel }}"
        classic: yes

    - name: Start MicroK8s
      shell: microk8s status | grep "microk8s is running" || microk8s start
      changed_when: false

    - name: Configure CNI
      template:
        src: cilium.conf.j2
        dest: /etc/cni/net.d/05-cilium.conf
        mode: '0600'
      register: cni_updated

    - name: Enable cilium
      shell: |
        microk8s enable community || (sleep 10 && microk8s enable community) || true
        microk8s enable cilium || (sleep 10 && microk8s enable cilium) || true
      when: cni_updated.changed

    - name: Configure wireguard IP for k8s comms
      block:
        - name: Get current kubelet args
          slurp:
            src: /var/snap/microk8s/current/args/kubelet
          register: kubelet_args

        - name: Check if node-ip is already configured
          set_fact:
            has_node_ip: "{{ (kubelet_args.content | b64decode) is regex('--node-ip=') }}"

        - name: Add node-ip to kubelet args
          lineinfile:
            path: /var/snap/microk8s/current/args/kubelet
            line: "--node-ip={{ wireguard_ip }}"
            create: yes
          when: not has_node_ip
          register: kubelet_modified

        - name: Restart kubelet if config changed
          systemd:
            name: snap.microk8s.daemon-kubelite
            state: restarted
          when: kubelet_modified.changed

    - name: Install kubernetes python package
      pip:
        name: kubernetes
        state: present
      become: yes

    - name: Setup Kubernetes access for user
      block:
        - name: Add user to microk8s group
          user:
            name: "{{ item }}"
            groups: microk8s
            append: yes
          with_items:
            - "{{ username }}"
            - "{{ ansible_user }}"

        - name: Ensure .kube directory exists for user
          file:
            path: "/home/{{ username }}/.kube"
            state: directory
            mode: '0755'
            owner: "{{ username }}"
            group: "{{ username }}"

        - name: Generate kubeconfig from microk8s
          shell: microk8s config > /home/{{ username }}/.kube/config
          args:
            creates: "/home/{{ username }}/.kube/config"

        - name: Set kubeconfig permissions
          file:
            path: "/home/{{ username }}/.kube/config"
            mode: '0600'
            owner: "{{ username }}"
            group: "{{ username }}"

    - name: Restart Wireguard if config changed
      shell: wg-quick down wg0; wg-quick up wg0
      when: wireguard_primary.changed or wireguard_worker.changed

    - name: Create containerd config directory
      file:
        path: /var/snap/microk8s/current/args/certs.d
        state: directory
        mode: '0755'

    - name: Set registry hostname
      set_fact:
        registry_hostname: "{{ validator | lower }}.localregistry.chutes.ai"

    - name: Create certs.d directory for registry
      file:
        path: "/var/snap/microk8s/current/args/certs.d/{{ registry_hostname }}:{{ registry_port }}"
        state: directory
        mode: '0755'

    - name: Create hosts.toml for registry
      template:
        src: hosts.toml.j2
        dest: "/var/snap/microk8s/current/args/certs.d/{{ registry_hostname }}:{{ registry_port }}/hosts.toml"
        mode: '0644'

    - name: Set hostname
      hostname:
        name: "{{ inventory_hostname }}"

    - name: Reboot
      reboot:
        msg: "Rebooting..."
        reboot_command: "reboot"
        connect_timeout: 5
        reboot_timeout: 900
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime
      when: gpu_setup.changed or cni_updated.changed
      register: rebooted

    - name: Wait for system to be ready
      wait_for_connection:
        timeout: 600
      when: rebooted.changed

    - name: Wait for microk8s to be ready
      shell: microk8s status | grep -E "microk8s is running|acting as a node in a cluster"
      register: result
      until: result.rc == 0
      retries: 30
      delay: 10
      ignore_errors: yes
      when: rebooted.changed

    - name: Install NVIDIA Container Toolkit
      apt:
        name: nvidia-container-toolkit
        state: present
      when: gpu_enabled | bool

    - name: Configure NVIDIA Container Toolkit
      shell: |
        nvidia-ctk runtime configure --runtime=docker --set-as-default
        nvidia-ctk runtime configure --runtime=containerd --set-as-default
        nvidia-ctk runtime configure --runtime=crio --set-as-default --config=/etc/crio/crio.conf.d/99-nvidia.conf
      register: container_runtime
      when: gpu_enabled | bool

    - name: Find all microk8s services
      shell: systemctl list-units --full --all "snap.microk8s.*" --plain --no-legend | awk '{print $1}'
      register: microk8s_services

    - name: Restart all microk8s services
      systemd:
        name: "{{ item }}"
        state: restarted
      loop: "{{ microk8s_services.stdout_lines }}"
      when: container_runtime.changed

    - name: Restart Docker service
      systemd:
        name: docker
        state: restarted
      when: container_runtime.changed

    - name: Patch Cilium ConfigMap to allow NodePort on loopback
      shell: |
        microk8s kubectl patch configmap cilium-config -n kube-system --type merge -p '{"data":{"node-port-bind-protection":"false"}}'
      when: is_primary | bool

    - name: Install iptables-persistent
      package:
        name:
          - iptables-persistent
          - netfilter-persistent
        state: present
      when: is_primary | bool

    - name: Add forwarding rule
      iptables:
        chain: FORWARD
        in_interface: wg0
        jump: ACCEPT
        state: present
      when: is_primary | bool

    - name: Add NAT masquerade rule
      iptables:
        table: nat
        chain: POSTROUTING
        out_interface: eth0
        jump: MASQUERADE
        state: present
      when: is_primary | bool

    - name: Save iptables rules
      shell: |
        netfilter-persistent save
        netfilter-persistent reload
      when: is_primary | bool

    - name: Enable IP forwarding
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        state: present
        sysctl_set: yes
        reload: yes
      when: is_primary | bool
